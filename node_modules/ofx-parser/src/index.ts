import { parseStringPromise } from 'xml2js'

interface OfxHeaders {
  [key: string]: string
}

type OfxValue = string | OfxObject | OfxValue[]

interface OfxObject {
  [key: string]: OfxValue
}

interface ParsedOfxData {
  header: OfxHeaders
  OFX: OfxObject
}

function convertSgmlToXml(sgml: string): string {
  return sgml
    .replace(/>\s+</g, '><') // Remove whitespace between tags
    .replace(/\s+</g, '<') // Remove whitespace before a tag
    .replace(/>\s+/g, '>') // Remove whitespace after a tag
    .replace(/<([A-Z0-9_]*)+\.+([A-Z0-9_]*)>([^<]+)/g, '<$1$2>$3')
    .replace(/<(\w+?)>([^<]+)/g, '<$1>$2</$1>')
}

async function parseXml(content: string): Promise<OfxObject> {
  return parseStringPromise(content, {
    explicitArray: false,
  }) as Promise<OfxObject>
}

async function parseOfx(data: string): Promise<ParsedOfxData> {
  // Split the data into headers and body based on the '<OFX>' tag
  const [headerText, bodyText] = data.split('<OFX>', 2)

  // Parse headers into a key-value object
  const headers: OfxHeaders = {}
  for (const line of headerText.split(/\r?\n/)) {
    const [key, value] = line.split(':', 2)
    if (key && value) {
      headers[key.trim()] = value.trim()
    }
  }

  // Reconstruct the body with the '<OFX>' tag
  const content = `<OFX>${bodyText}`

  // Attempt to parse the body as XML
  let parsedData: OfxObject
  try {
    parsedData = await parseXml(content)
  } catch {
    // If parsing fails, convert SGML to XML and retry
    const xmlContent = convertSgmlToXml(content)
    parsedData = await parseXml(xmlContent)
  }

  // Attach headers to the parsed data
  return {
    header: headers,
    OFX: parsedData.OFX as OfxObject,
  }
}

function objectToOfx(value: OfxValue): string {
  let output = ''

  if (typeof value === 'object' && value !== null) {
    if (Array.isArray(value)) {
      for (const item of value) {
        output += objectToOfx(item)
      }
    } else {
      const obj = value as OfxObject
      for (const key of Object.keys(obj)) {
        const val = obj[key]
        const startTag = `<${key}>`
        const endTag = `</${key}>`

        output += `${startTag}${objectToOfx(val)}${endTag}\n`
      }
    }
  } else {
    output += `${value}\n`
  }

  return output
}

function serializeOfx(headers: OfxHeaders, body: OfxObject): string {
  let output = ''
  // Specify the order of headers
  const headerOrder = [
    'OFXHEADER',
    'DATA',
    'VERSION',
    'SECURITY',
    'ENCODING',
    'CHARSET',
    'COMPRESSION',
    'OLDFILEUID',
    'NEWFILEUID',
  ]

  // Append headers to the output
  for (const key of headerOrder) {
    if (headers[key]) {
      output += `${key}:${headers[key]}\n`
    }
  }
  output += '\n'

  // Convert the body object to OFX format and append
  output += objectToOfx({ OFX: body })
  return output
}

export { parseOfx as parse, serializeOfx as serialize }
